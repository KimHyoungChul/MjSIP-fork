package local.server;


import org.zoolu.sip.provider.SipStack;
import org.zoolu.sip.message.Message;
import org.zoolu.sip.message.SipMethods;
import org.zoolu.tools.Log;

import java.util.Hashtable;
import java.util.Vector;


/** CallLoggerImpl implements a simple CallLogger.
  * <p> A CallLogger keeps trace of all processed calls.
  */
public class CallLoggerImpl implements CallLogger
{
   /** State 'INVITE' */
   static final String S_INVITE="INVITE";
   /** State 'CALL' */
   static final String S_CALL="CALL";
   /** State 'REFUSE' */
   static final String S_REFUSE="REFUSE";
   /** State 'CLOSE' */
   static final String S_CLOSE="CLOSE";
   
   /** Maximum number of concurrent calls. */
   static final int MAX_SIZE=10000;

   /** Table : call_id --> status. */
   Hashtable call_states;

   /** Set of active call_ids. */
   Vector call_ids;

   /** Logger. */
   Log call_log;

   
   /** Costructs a new CallLoggerImpl.
     */
   public CallLoggerImpl(String filename)
   {  call_states=new Hashtable();
      call_ids=new Vector();
      call_log=new Log(filename,null,1,-1,true);
      call_log.println("Time \tCall-Id \tStatus \tCaller \tCallee");
   }
 
   
   /** Updates log with the present message.
     */
   public void update(Message msg)
   {
      String method=msg.getCSeqHeader().getMethod();
      String call_id=msg.getCallIdHeader().getCallId();

      if (method.equalsIgnoreCase(SipMethods.INVITE))
      {
         String state=(String)call_states.get(call_id);
         if (msg.isRequest())
         {  if (state==null)
            {  String new_state=S_INVITE;
               insert(call_id,new_state);
               printlog(new_state,call_id,msg);
            }
         }
         else
         {  int code=msg.getStatusLine().getCode();
            if (code>=200 && (state==null || state.equals(S_INVITE)))
            {  String new_state=(code<300)? S_CALL : S_REFUSE;
               insert(call_id,new_state);
               printlog(new_state,call_id,msg);
            }
         }
      }
      else
      if (method.equalsIgnoreCase(SipMethods.BYE))
      {
         String state=(String)call_states.get(call_id);
         if (msg.isRequest())
         {  if (state==null || state.equals(S_CALL))
            {  String new_state=S_CLOSE;
               insert(call_id,new_state);
               printlog(new_state,call_id,msg);
            }
         }      
      }
   }


   /** Insters/updates a new call state.
     */
   private void insert(String call_id, String state)
   {  if (call_states.containsKey(call_id)) call_states.remove(call_id);
      else
      {  if (call_ids.size()==MAX_SIZE) 
         {  call_states.remove((String)call_ids.elementAt(0));
            call_ids.removeElementAt(0);
         }
         call_ids.addElement(call_id);
      }
      call_states.put(call_id,state);
   }


   /** Prints log.
     */
   private void printlog(String state, String call_id, Message msg)
   {  String caller=msg.getFromHeader().getNameAddress().getAddress().toString();
      String callee=msg.getToHeader().getNameAddress().getAddress().toString();
      call_log.println(Log.timestamp()+"\t"+call_id+"\t"+state+"\t"+caller+"\t"+callee);
   }

}